' Connecting the report to SAP and screenshotting all the projects (SOX Greece)
' These lines are necessary for SAP GUI
Public SapGuiAuto, WScript, msgcol
Public objGui  As GuiApplication
Public objConn As GuiConnection
Public session As GuiSession

' These lines are responsible for mouse movements
' Depending on your operating system, use these lines or the alternatives below

'Private Declare Sub mouse_event Lib "user32" _
'(ByVal dwFlags As Long, ByVal dx As Long, _
'ByVal dy As Long, ByVal cButtons As Long, _
'ByVal swextrainfo As Long)

Private Declare PtrSafe Sub mouse_event Lib "user32" _
(ByVal dwFlags As Long, ByVal dx As Long, _
ByVal dy As Long, ByVal cButtons As Long, _
ByVal swextrainfo As Long)

' Constants for mouse event actions
Private Const mouseeventf_leftdown = &H2
Private Const mouseeventf_leftup = &H4
Private Const mouseeventF_Rightdown As Long = &H8
Private Const mouseeventF_rightup As Long = &H10

' Depending on your operating system, you should declare functions using 'Declare' or 'PtrSafe Declare'
' Public Declare Function SetCursorPos Lib "user32.dll" _
' (ByVal x As Integer, ByVal y As Integer) As Long

Public Declare PtrSafe Function SetCursorPos Lib "user32.dll" _
(ByVal x As Integer, ByVal y As Integer) As Long

' Access the sleep function in user32.dll
Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)

' Access the GetCursorPos function in user32.dll
Declare PtrSafe Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long

Sub main_POC()

    ' Prompt the user to confirm if they want to run the macro
    CarryOn = MSGBOX("Do you want to run this macro?", vbYesNo)
    If CarryOn = vbYes Then
    
        ' Initialize SAP GUI and Excel objects
        Dim sapGuiApp As Object
        Dim excelApp As Object
        Dim excelSheet As Object
        Dim session As Object
        Set session = GetObject("SAPGUI").GetScriptingEngine.Children(0).Children(0)
        
        ' Retrieve coordinates for mouse actions
        Dim Hold As POINTAPI
        Hold.X_Pos = Workbooks("Greece screens Projects.xlsm").Worksheets("Macro").Range("B4").Value
        Hold.Y_Pos = Workbooks("Greece screens Projects.xlsm").Worksheets("Macro").Range("B5").Value

        ' Copy project numbers from the Excel sheet and paste them into SAP
        Workbooks("Greece screens Projects.xlsm").Worksheets("POC").Activate
        Range("A4").Select
        Range(Selection, Selection.End(xlDown)).Copy

        ' Navigate through SAP GUI and input required data
        session.findById("wnd[0]").maximize
        session.findById("wnd[0]/usr/ctxt$6-KOKRS").Text = "9000"
        session.findById("wnd[0]/usr/ctxt$6-KSTAR").Text = "PSR_NET"
        session.findById("wnd[0]/usr/ctxt$6-KSTAR").SetFocus
        session.findById("wnd[0]/usr/ctxt$6-KSTAR").CaretPosition = 7
        session.findById("wnd[0]/usr/btn%_CN_PROJN_%_APP_%-VALU_PUSH").Press
        session.findById("wnd[1]/tbar[0]/btn[16]").Press
        session.findById("wnd[1]/tbar[0]/btn[24]").Press
        session.findById("wnd[1]/tbar[0]/btn[8]").Press
        session.findById("wnd[0]/tbar[1]/btn[8]").Press
        session.findById("wnd[0]/shellcont/shell/shellcont[2]/shell").ExpandNode "000001"
        session.findById("wnd[0]/tbar[1]/btn[24]").Press

        ' Perform mouse click on the triangle in SAP using the retrieved coordinates
        SetCursorPos Hold.X_Pos, Hold.Y_Pos
        ' Click and release the left button
        mouse_event mouseeventf_leftdown, 0&, 0&, 0&, 0&
        Sleep (250)

        ' Capture the screenshot and paste it into the Excel file
        wh = Worksheets("Macro").Range("B7").Value
        ht = Worksheets("Macro").Range("B8").Value

        Application.SendKeys "({1068})", True
        DoEvents
        Sleep (500)
        Workbooks("Greece screens Projects.xlsm").Worksheets("POC").Activate
        Sleep (1000)
        Sheets("POC").Paste Destination:=Sheets("POC").Range("H8")

        ' Adjust the screenshot size
        With ActiveSheet
            Set shp = .Shapes(.Shapes.Count)
        End With

        h = -(ht - shp.Height)
        w = -(wh - shp.Width)

        shp.LockAspectRatio = False
        shp.PictureFormat.CropRight = w
        shp.PictureFormat.CropBottom = h
        shp.Select
        Selection.ShapeRange.ScaleWidth 0.6, msoFalse, msoScaleFromTopLeft
        Selection.ShapeRange.ScaleHeight 0.6, msoFalse, msoScaleFromTopLeft

        ' Process each project node to take the required screenshots
        Dim Nodes() As Variant
        Nodes = Range("A4").CurrentRegion
        Dim i As Long
        
        ' Loop through each project node
        For i = LBound(Nodes) To UBound(Nodes)
            If Nodes(i, 3) = "select" Then
                ' Navigate to the relevant node in SAP
                session.findById("wnd[0]/shellcont/shell/shellcont[2]/shell").SelectedNode = Nodes(i, 2)
                session.findById("wnd[0]/tbar[1]/btn[24]").Press

                ' Perform the mouse click on the triangle again
                SetCursorPos Hold.X_Pos, Hold.Y_Pos
                mouse_event mouseeventf_leftdown, 0&, 0&, 0&, 0&
                Sleep (250)

                ' Capture additional screenshots and paste them into Excel
                Application.SendKeys "({1068})", True
                DoEvents
                Sleep (500)
                Windows("Greece screens Projects.xlsm").Activate
                DoEvents
                Sleep (600)
                Sheets("POC").Paste Destination:=Sheets("POC").Cells(50 + (i - 1) * 30, "H")

                ' Adjust the screenshot size
                With ActiveSheet
                    Set shp = .Shapes(.Shapes.Count)
                End With

                h = -(ht - shp.Height)
                w = -(wh - shp.Width)

                shp.LockAspectRatio = False
                shp.PictureFormat.CropRight = w
                shp.PictureFormat.CropBottom = h
                shp.Select
                Selection.ShapeRange.ScaleWidth 0.55, msoFalse, msoScaleFromTopLeft
                Selection.ShapeRange.ScaleHeight 0.55, msoFalse, msoScaleFromTopLeft
            End If
        Next i

        ' Maximize the SAP window and close the session
        session.findById("wnd[0]").maximize
        session.findById("wnd[0]/tbar[0]/btn[3]").Press
        session.findById("wnd[1]/usr/btnBUTTON_YES").Press

    End If
    
    ' Indicate that the macro has completed
    MSGBOX "Done"

End Sub

' Main routine to dimension variables, retrieve cursor position,
' and display coordinates
Sub Get_Cursor_Pos()

    ' Run the macro and place the cursor in the desired location to get the coordinates
    Application.Wait (Now() + TimeValue("0:00:03"))
    ' Dimension the variable that will hold the x and y cursor positions
    Dim Hold As POINTAPI

    ' Retrieve the cursor positions and store them in the variable Hold
    GetCursorPos Hold

    ' Display the cursor position coordinates
    MSGBOX "X Position is : " & Hold.X_Pos & Chr(10) & "Y Position is : " & Hold.Y_Pos
    Worksheets("Macro").Range("B4") = Hold.X_Pos
    Worksheets("Macro").Range("B5") = Hold.Y_Pos
    ' Application.Wait (Now() + TimeValue("0:00:03"))
    ' SetCursorPos Hold.X_Pos, Hold.Y_Pos
End Sub

' Routine to check the resolution of a screenshot and adjust it accordingly
Sub Check_resolution()

    wh = Worksheets("Macro").Range("B7").Value
    ht = Worksheets("Macro").Range("B8").Value

    Application.SendKeys "({1068})", True
    DoEvents
    Sheets("Macro").Paste Destination:=Sheets("Macro").Range("A20")

    With ActiveSheet
        Set shp = .Shapes(.Shapes.Count)
    End With

    h = -(ht - shp.Height)
    w = -(wh - shp.Width)

    shp.LockAspectRatio = False
    shp.PictureFormat.CropRight = w
    shp.PictureFormat.CropBottom = h

End Sub

' Routine to verify if the coordinates are correct by simulating the mouse click
Sub Check_coordinates()
    
    Dim Hold As POINTAPI
    Set SapGuiAuto = GetObject("SAPGUI")
    Set objGui = SapGuiAuto.GetScriptingEngine
    Set objConn = objGui.Children(0)
    Set session = objConn.Children(0)
    session.findById("wnd[0]").maximize
    
    Hold.X_Pos = Worksheets("Macro").Range("B4").Value
    Hold.Y_Pos = Worksheets("Macro").Range("B5").Value
    
    SetCursorPos Hold.X_Pos, Hold.Y_Pos
    ' Click and release left button
    mouse_event mouseeventf_leftdown, 0&, 0&, 0&, 0&
    mouse_event mouseeventf_leftup, 0&, 0&, 0&, 0&
End Sub

' Routine to clean all shapes from specific sheets before the next SOX control
Sub Cleaning_sheets()

    Workbooks("Greece screens Projects.xlsm").Worksheets("POC").Activate
    ActiveSheet.Shapes.SelectAll
    Selection.Delete

    Workbooks("Greece screens Projects.xlsm").Worksheets("CCM").Activate
    ActiveSheet.Shapes.SelectAll
    Selection.Delete

    Workbooks("Greece screens Projects.xlsm").Worksheets("CCM Service").Activate
    ActiveSheet.Shapes.SelectAll
    Selection.Delete

    Workbooks("Greece screens Projects.xlsm").Worksheets("WAR").Activate
    ActiveSheet.Shapes.SelectAll
    Selection.Delete

    MSGBOX "Done"
End Sub
